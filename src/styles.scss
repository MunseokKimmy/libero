
// Custom Theming for Angular Material
// For more information: https://material.angular.io/guide/theming
@use '@angular/material' as mat;
@import '~@angular/cdk/overlay-prebuilt.css';
// Plus imports for other components in your app.
@tailwind base;
@tailwind components;
@tailwind utilities;
// Include the common styles for Angular Material. We include this here so that you only
// have to load a single css file for Angular Material in your app.
// Be sure that you only ever include this mixin once!
// TODO(v15): As of v15 mat.legacy-core no longer includes default typography styles.
//  The following line adds:
//    1. Default typography styles for all components
//    2. Styles for typography hierarchy classes (e.g. .mat-headline-1)
//  If you specify typography styles for the components you use elsewhere, you should delete this line.
//  If you don't need the default component typographies but still want the hierarchy styles,
//  you can delete this line and instead use:
//    `@include mat.legacy-typography-hierarchy(mat.define-legacy-typography-config());`
@include mat.all-legacy-component-typographies();
@include mat.legacy-core();

// Define the palettes for your theme using the Material Design palettes available in palette.scss
// (imported above). For each palette, you can optionally specify a default, lighter, and darker
// hue. Available color palettes: https://material.io/design/color/
$libero-pwa-primary: mat.define-palette(mat.$indigo-palette);
$libero-pwa-accent: mat.define-palette(mat.$pink-palette, A200, A100, A400);

// The warn palette is optional (defaults to red).
$libero-pwa-warn: mat.define-palette(mat.$red-palette);

// Create the theme object. A theme consists of configurations for individual
// theming systems such as "color" or "typography".
$libero-pwa-theme: mat.define-light-theme((
  color: (
    primary: $libero-pwa-primary,
    accent: $libero-pwa-accent,
    warn: $libero-pwa-warn,
  )
));

// Include theme styles for core and each component used in your app.
// Alternatively, you can import and @include the theme mixins for each component
// that you are using.
@include mat.all-legacy-component-themes($libero-pwa-theme);

@import url('https://fonts.googleapis.com/css2?family=Arbutus+Slab&display=swap');

/* You can add global styles to this file, and also import other style files */

.row {
  display: flex;
}

html, body {
  margin: 0;
  height: 100%;
  width: 100%;
} 

.main {
  height: 100%;
  width: 100%;
}

.column {
  display: flex;
  flex-direction: column;
}

.center {
  justify-content: center;
  align-items: center;
}

.icon {
  height: 24px;
}

.white-bg {
  background: rgb(242,238,227);
  background: linear-gradient(90deg, rgba(242,238,227,1) 0%, rgba(242,242,245,1) 100%);
}


.light-bg {
  background-color: #7892B5;
}

.dark-bg {
  background-color: #5065A8;  
}

.oceanwide {
  font-family: Oceanwide;
}

/* in-flight clone */
.gu-mirror {
  position: fixed !important;
  margin: 0 !important;
  z-index: 9999 !important;
  opacity: 0.8;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=80)";
  filter: alpha(opacity=80);
  pointer-events: none;
}


.fullscreen-dialog {
  height: 80vh;
  width: 90vw !important;
  max-width: none !important;
}

/* high-performance display:none; helper */
.gu-hide {
  left: -9999px !important;
}
/* added to mirrorContainer (default = body) while dragging */
.gu-unselectable {
  -webkit-user-select: none !important;
  -moz-user-select: none !important;
  -ms-user-select: none !important;
  user-select: none !important;
}
/* added to the source element while its mirror is dragged */
.gu-transit {
  opacity: 0.2;
  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";
  filter: alpha(opacity=20);
}

html, body { height: 100%; }
body { margin: 0; font-family: Roboto, "Helvetica Neue", sans-serif; }
